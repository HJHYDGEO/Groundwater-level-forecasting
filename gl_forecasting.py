# -*- coding: utf-8 -*-
"""GL_forecasting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Ac5-OUZ7NREx5kyWJUz9QXyflLpbvhc
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dropout
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import joblib
from tensorflow.keras import layers, models

data = pd.read_excel('Data2.xlsx', parse_dates=True, index_col=0)

data.head()

columns = [0, 1, 2, 3]
i = 1
values = data.values



for variable in columns:
     plt.subplot(len(columns), 1, i)
     plt.plot(values[:, variable])
     plt.title(data.columns[variable], y=0.5, loc='right')
     i += 1
     plt.show()

values = data.values

values = values.astype('float32')

n = len(data)
train_data = data[:int(n*.7)]
val_data = data[int(n*.7):int(n*.9)]
test_data = data[int(n*.9):]

print(train_data)

Gr_lev = train_data[train_data.columns[0:1]].to_numpy()

Gr_lev

train_mean = train_data.mean()
train_std = train_data.std()

train_data1 = (train_data - train_mean) / train_std 
val_data1 = (val_data - train_mean) / train_std 
test_data1 = (test_data - train_mean) / train_std

train_std

print(train_data1)



Gr_Lev1 = train_data1[train_data1.columns[0:1]].to_numpy()

Gr_Lev1

def create_dataset (data, input_width=1, offset=0,predict_column='Gr_Lev'):
    x = []
    y = []
    data_x = data.to_numpy()
    data_y = data[predict_column].to_numpy()
   
    
    for i in range(input_width, len(data_x) - offset):
        x.append(data_x[i - input_width:i, :])
        y.append(data_y[i + offset])

        
    x = np.array(x)
    y = np.array(y)
    
    return x, y.reshape(-1,1)

train_ds = create_dataset(train_data1)
val_ds = create_dataset(val_data1)
test_ds = create_dataset(test_data1)

model = models.Sequential()
model.add(layers.LSTM(64, return_sequences=True, input_shape=train_ds[0].shape[1:]))
model.add(layers.Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])
model.fit(x=train_ds[0], y=train_ds[1], validation_data=(val_ds[0], val_ds[1]), epochs=50)

x, y =val_ds

y_pred = model.predict(x)

fig, ax = plt.subplots()
i=1
ax.plot(y[i:i+5000,0], c='g')
ax.plot(y_pred[i:i+5000,-1,0], c='r')

df_c = pd.DataFrame({'real': y[:,0], 'pred': y_pred[:,-1,0]})
df_c.corr()

df_c.to_csv('real_pred_val')